"use strict";(self.webpackChunkcrossmint_embedded_checkout=self.webpackChunkcrossmint_embedded_checkout||[]).push([[83807],{83807:(e,t,n)=>{n.d(t,{upload:()=>h});var r=n(11977),i=n(30260);const a="[object Uint8Array]";function o(e){if(!s(e))throw new TypeError(`Expected \`Uint8Array\`, got \`${typeof e}\``)}function s(e){return!!e&&(e.constructor===Uint8Array||Object.prototype.toString.call(e)===a)}function f(e,t){if(o(e),o(t),e===t)return!0;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function l(e){return globalThis.File&&e instanceof File}function u(e){return!!e&&!!function(e,t=[]){return function(e){return"object"==typeof e&&null!==e}(e)&&t.every((t=>t in e))}(e,["data","name"])&&!("string"!=typeof e.name||"string"!=typeof e.data&&!s(e.data))}function c(e,t){if(l(e)&&l(t)){if(e.name===t.name&&e.lastModified===t.lastModified&&e.size===t.size)return!0}else{if(s(e)&&s(t))return f(e,t);if(u(e)&&u(t)&&e.name===t.name){if("string"==typeof e.data&&"string"==typeof t.data)return e.data===t.data;if(s(e.data)&&s(t.data))return f(e.data,t.data)}}return!1}function p(e){return l(e)||s(e)||u(e)}function m(e,t=[]){if(p(e))return t.push(e),t;if("object"==typeof e){if(!e)return t;if(Array.isArray(e))for(const n of e)m(n,t);else Object.keys(e).map((n=>m(e[n],t)))}return t}function d(e,t){if(p(e)){if(t.length)return t.shift();console.warn("Not enough URIs to replace all files in object.")}return"object"==typeof e&&e?Array.isArray(e)?e.map((e=>d(e,t))):Object.fromEntries(Object.entries(e).map((([e,n])=>[e,d(n,t)]))):e}function y(e){return"string"==typeof e?(t=e).includes("/ipfs/")?`ipfs://${t.split("/ipfs/")[1]}`:t:"object"==typeof e&&e?p(e)?e:Array.isArray(e)?e.map((e=>y(e))):Object.fromEntries(Object.entries(e).map((([e,t])=>[e,y(t)]))):e;var t}async function h(e){if(0===e.files.length)return null;let t;if(e.files.map((e=>p(e)||"string"==typeof e)).every((e=>!!e)))t=e.files;else{let n=e.files;n=y(n);const r=m(n);if(r.length){const t=await h({...e,files:r});n=d(n,Array.isArray(t)?t:[t])}t=n.map((e=>"string"==typeof e?e:(0,i.A)(e)))}const a=new FormData,{fileNames:o,form:s}=function(e,t,n){const r=new Map,i=[];for(let a=0;a<t.length;a++){const o=t[a];let s="",f=o;if(l(o))if(n?.rewriteFileNames){let e="";if(o.name){const t=o.name.lastIndexOf(".");t>-1&&(e=o.name.substring(t))}s=`${a+n.rewriteFileNames.fileStartNumber}${e}`}else s=`${o.name}`;else u(o)?(f=o.data,s=n?.rewriteFileNames?`${a+n.rewriteFileNames.fileStartNumber}`:`${o.name}`):s=n?.rewriteFileNames?`${a+n.rewriteFileNames.fileStartNumber}`:`${a}`;const p=n?.uploadWithoutDirectory?"files":`files/${s}`;if(r.has(s)){if(c(r.get(s),o)){i.push(s);continue}throw new Error(`[DUPLICATE_FILE_NAME_ERROR] File name ${s} was passed for more than one different file.`)}r.set(s,o),i.push(s),e.append("file",new Blob([f]),p)}const a={name:"Storage SDK",keyvalues:{...n?.metadata}};return e.append("pinataMetadata",JSON.stringify(a)),n?.uploadWithoutDirectory&&e.append("pinataOptions",JSON.stringify({wrapWithDirectory:!1})),{form:e,fileNames:i.map((e=>encodeURIComponent(e)))}}(a,t,e),f=(0,r.l)();if("browser"===f||"node"===f){const{uploadBatch:t}=await n.e(49739).then(n.bind(n,49739)),r=await t(e.client,s,o,e);return 1===e.files.length?r[0]:r}throw new Error("Please, use the uploadMobile function in mobile environments.")}}}]);