"use strict";(self.webpackChunkcrossmint_embedded_checkout=self.webpackChunkcrossmint_embedded_checkout||[]).push([[85889],{85889:(t,a,e)=>{e.d(a,{relayBiconomyTransaction:()=>u});var n=e(94531),s=e(9060),o=e(747),r=e(8908),i=e(98753),c=e(30260),d=e(3125);const h=0n;async function u(t){const[a,e]=await async function({account:t,serializableTransaction:a,transaction:e,gasless:r}){const c=(0,o.P)({address:r.relayerForwarderAddress,chain:e.chain,client:e.client}),u=await(0,d.readContract)({contract:c,method:"function getNonce(address,uint256) view returns (uint256)",params:[t.address,h]}),w=Math.floor(Date.now()/1e3)+(r.deadlineSeconds??3600),p={from:t.address,to:a.to,token:s.Y4,txGas:a.gas,tokenGasPrice:0n,batchId:h,batchNonce:u,deadline:w,data:a.data};if(!p.to)throw new Error("Cannot send a transaction without a `to` address");if(!p.txGas)throw new Error("Cannot send a transaction without a `gas` value");if(!p.data)throw new Error("Cannot send a transaction without a `data` value");const l=(0,n.h)([{type:"address"},{type:"address"},{type:"address"},{type:"uint256"},{type:"uint256"},{type:"uint256"},{type:"uint256"},{type:"bytes32"}],[p.from,p.to,p.token,p.txGas,p.tokenGasPrice,p.batchId,p.batchNonce,(0,i.S)(p.data)]);return[p,await t.signMessage({message:l})]}(t),u=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:(0,c.A)({apiId:t.gasless.apiId,params:[a,e],from:a.from,to:a.to,gasLimit:a.txGas}),headers:{"x-api-key":t.gasless.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(!u.ok)throw u.body?.cancel(),new Error(`Failed to send transaction: ${await u.text()}`);const w=await u.json(),p=w.txHash;if((0,r.q)(p))return{transactionHash:p,chain:t.transaction.chain,client:t.transaction.client};throw new Error(`Failed to send transaction: ${(0,c.A)(w)}`)}}}]);