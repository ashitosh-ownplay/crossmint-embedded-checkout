"use strict";(self.webpackChunkcrossmint_embedded_checkout=self.webpackChunkcrossmint_embedded_checkout||[]).push([[529],{529:(e,t,n)=>{n.d(t,{upload:()=>p});var r=n(11977),i=n(30260),a=n(46441);function s(e){return globalThis.File&&e instanceof File}function o(e){return!!e&&!!function(e,t=[]){return function(e){return"object"==typeof e&&null!==e}(e)&&t.every((t=>t in e))}(e,["data","name"])&&!("string"!=typeof e.name||"string"!=typeof e.data&&!(0,a.mg)(e.data))}function f(e,t){if(s(e)&&s(t)){if(e.name===t.name&&e.lastModified===t.lastModified&&e.size===t.size)return!0}else{if((0,a.mg)(e)&&(0,a.mg)(t))return(0,a.tv)(e,t);if(o(e)&&o(t)&&e.name===t.name){if("string"==typeof e.data&&"string"==typeof t.data)return e.data===t.data;if((0,a.mg)(e.data)&&(0,a.mg)(t.data))return(0,a.tv)(e.data,t.data)}}return!1}function l(e){return s(e)||(0,a.mg)(e)||o(e)}function u(e,t=[]){if(l(e))return t.push(e),t;if("object"==typeof e){if(!e)return t;if(Array.isArray(e))for(const n of e)u(n,t);else Object.keys(e).map((n=>u(e[n],t)))}return t}function c(e,t){if(l(e)){if(t.length)return t.shift();console.warn("Not enough URIs to replace all files in object.")}return"object"==typeof e&&e?Array.isArray(e)?e.map((e=>c(e,t))):Object.fromEntries(Object.entries(e).map((([e,n])=>[e,c(n,t)]))):e}function m(e){return"string"==typeof e?(t=e).includes("/ipfs/")?`ipfs://${t.split("/ipfs/")[1]}`:t:"object"==typeof e&&e?l(e)?e:Array.isArray(e)?e.map((e=>m(e))):Object.fromEntries(Object.entries(e).map((([e,t])=>[e,m(t)]))):e;var t}async function p(e){if(0===e.files.length)return null;let t;if(e.files.map((e=>l(e)||"string"==typeof e)).every((e=>!!e)))t=e.files;else{let n=e.files;n=m(n);const r=u(n);if(r.length){const t=await p({...e,files:r});n=c(n,Array.isArray(t)?t:[t])}t=n.map((e=>"string"==typeof e?e:(0,i.A)(e)))}const a=new FormData,{fileNames:d,form:y}=function(e,t,n){const r=new Map,i=[];for(let a=0;a<t.length;a++){const l=t[a];let u="",c=l;if(s(l))if(n?.rewriteFileNames){let e="";if(l.name){const t=l.name.lastIndexOf(".");t>-1&&(e=l.name.substring(t))}u=`${a+n.rewriteFileNames.fileStartNumber}${e}`}else u=`${l.name}`;else o(l)?(c=l.data,u=n?.rewriteFileNames?`${a+n.rewriteFileNames.fileStartNumber}`:`${l.name}`):u=n?.rewriteFileNames?`${a+n.rewriteFileNames.fileStartNumber}`:`${a}`;const m=n?.uploadWithoutDirectory?"files":`files/${u}`;if(r.has(u)){if(f(r.get(u),l)){i.push(u);continue}throw new Error(`[DUPLICATE_FILE_NAME_ERROR] File name ${u} was passed for more than one different file.`)}r.set(u,l),i.push(u),e.append("file",new Blob([c]),m)}const a={name:"Storage SDK",keyvalues:{...n?.metadata}};return e.append("pinataMetadata",JSON.stringify(a)),n?.uploadWithoutDirectory&&e.append("pinataOptions",JSON.stringify({wrapWithDirectory:!1})),{form:e,fileNames:i.map((e=>encodeURIComponent(e)))}}(a,t,e),h=(0,r.l)();if("browser"===h||"node"===h){const{uploadBatch:t}=await n.e(49739).then(n.bind(n,49739)),r=await t(e.client,y,d,e);return 1===e.files.length?r[0]:r}throw new Error("Please, use the uploadMobile function in mobile environments.")}}}]);